
macro(setup_platform)
 # do we have openmp?
 # TODO: Use Kokkos to determine this
if (APPLE)
   set(LPM_USE_OPENMP FALSE)
#   SET(CMAKE_INSTALL_NAME_DIR ${CMAKE_CURRENT_BINARY_DIR}/tests)
#   SET(CMAKE_BUILD_WITH_INSTALL_RPATH ON)
#   SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
#   SET(CMAKE_BUILD_RPATH_USE_LINK_PATH ON )
    set(DYLD_TO_RPATH "")
    string(REPLACE ":" ";" DYLD_TO_RPATH $ENV{DYLD_LIBRARY_PATH})
    set(CMAKE_BUILD_RPATH "${DYLD_TO_RPATH} ${CMAKE_BUILD_RPATH}")
   find_package(Threads)
   if (Threads_FOUND)
     set(LPM_USE_THREADS TRUE)
     message(STATUS "threads enabled for Mac OS; setting LPM_USE_THREADS")
   endif()
else()
find_package(OpenMP)
if (OpenMP_FOUND)
   message(STATUS "setting LPM_USE_OPENMP")
   set(LPM_USE_OPENMP TRUE)
else()
  set(LPM_USE_OPENMP FALSE)
endif()
endif()

if (LPM_ENABLE_BOOST)
  find_package(Boost REQUIRED COMPONENTS math_tr1)
  set(LPM_USE_BOOST TRUE CACHE BOOL "Boost math enabled")
endif()

if (LPM_USE_OPENMP)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  message(STATUS "OpenMP is enabled")
endif()

if (Trilinos_DIR)
  include(lpm_find_trilinos)
else()
  message(STATUS "Trilinos_DIR not specified; looking for standalone TPLs")
  include(lpm_find_kokkos)
endif()

if (LPM_USE_EXTERNAL_SPDLOG)
  if (SPDLOG_DIR) 
    set(SPDLOG_HINTS ${SPDLOG_DIR} ${SPDLOG_DIR}/lib/cmake ${SPDLOG_DIR}/lib64/cmake)
  else()
    set(SPDLOG_HINTS $ENV{SPDLOG_ROOT} $ENV{SPDLOG_ROOT}/lib/cmake $ENV{SPDLOG_ROOT}/lib64/cmake)
  endif()
  message(STATUS "Looking for external spdlog package at ${SPDLOG_HINTS}")
  find_package(spdlog CONFIG REQUIRED HINTS ${SPDLOG_HINTS})
else()
  include(lpm_build_spdlog)
endif()

if (LPM_USE_EXTERNAL_CATCH2)
  if (CATCH2_DIR)
    set(CATCH2_HINTS ${CATCH2_DIR} ${CATCH2_DIR}/lib/cmake ${CATCH2_DIR}/lib64/cmake)
  else()
    set(CATCH2_HINTS $ENV{CATCH2_ROOT} $ENV{CATCH2_ROOT}/lib/cmake $ENV{CATCH2_ROOT}/lib64/cmake)
  endif()
  message(STATUS "Looking for external catch2 package at ${CATCH2_HINTS}")
  find_package(catch2 CONFIG REQUIRED HINTS ${CATCH2_HINTS})
else()
  include(lpm_build_catch2)
endif()
include(lpm_find_vtk)
include(lpm_find_compose)
if (LPM_ENABLE_NETCDF)
  include(lpm_find_netcdf)
endif()
if (LPM_ENABLE_DFS)
  include(lpm_find_finufft)
  include(lpm_find_fftw3)
endif()
if (LPM_ENABLE_FastBVE)
  include(lpm_find_fastbve)
endif()

endmacro()
