#
# NetCDF (Optional)
#


set(LPM_USE_NETCDF FALSE)
if (LPM_ENABLE_NETCDF)
  find_package(ZLIB REQUIRED)
   #
   #  look for CMake-built HDF5
   #
  list(APPEND CMAKE_MODULE_PATH $ENV{HDF5_ROOT})
  find_package(hdf5 CONFIG QUIET)
  if (hdf5_FOUND)
     message(STATUS "found hdf5")
  else(hdf5_FOUND)
    #
    #   look for non-CMake HDF5
    #
    message(STATUS "cmake package hdf5 not found. Looking for explicit include dirs and libraries...")
    if(HDF5_INCLUDE_DIR)
      if (NOT EXISTS ${HDF5_INCLUDE_DIR})
        message(FATAL_ERROR "Couldn't find HDF5 include dir at ${HDF5_INCLUDE_DIR}.")
      endif()
      message(STATUS "looking for hdf5 headers in include dir: ${HDF5_INCLUDE_DIR}.")
      if (EXISTS ${HDF5_INCLUDE_DIR}/hdf5.h)
        message(STATUS "found hdf5.h")
        if (EXISTS ${HDF5_INCLUDE_DIR}/hdf5_hl.h)
          message(STATUS "found hdf5_hl.h")
        else()
          message(FATAL_ERROR "cannof find hdf5_hl.h")
        endif()
      else()
        message(FATAL_ERROR "cannot find hdf5.h")
      endif()
      if (HDF5_LIBRARY)
        if (NOT EXISTS ${HDF5_LIBRARY})
          message(FATAL_ERROR "Couldn't find hdf5 library at ${HDF5_LIBRARY}.")
        endif()
        message(STATUS "found hdf5 library at ${HDF5_LIBRARY}.")
      else(HDF5_LIBRARY)
        message(FATAL_ERROR "on a system without a CMake package for hdf5, the variables HDF5_LIBRARY, must be set to the full path of libhdf5.a or libhdf5.so")
      endif(HDF5_LIBRARY)
      if (HDF5_HL_LIBRARY)
        if (NOT EXISTS ${HDF5_HL_LIBRARY})
          message(FATAL_ERROR "Couldn't find high-level hdf5 library at ${HDF5_HL_LIBRARY}.")
        endif()
        message(STATUS "found high-level hdf5 library at ${HDF5_HL_LIBRARY}.")
      else (HDF5_HL_LIBRARY)
        message(FATAL_ERROR "on a system without a CMake package for hdf5, the variables HDF5_HL_LIBRARY, must be set to the full path of libhdf5_hl.a or libhdf5_hl.so")
      endif(HDF5_HL_LIBRARY)
    else(HDF5_INCLUDE_DIR)
      message(FATAL_ERROR "on a system without a CMake package for hdf5, the variables HDF5_INCLUDE_DIR, must be set")
    endif(HDF5_INCLUDE_DIR)

    set(hdf5_FOUND TRUE)
    if (HDF5_LIBRARY MATCHES ".so")
      add_library(hdf5 SHARED IMPORTED GLOBAL)
      add_library(hdf5_hl SHARED IMPORTED GLOBAL)
    else()
      add_library(hdf5 STATIC IMPORTED GLOBAL)
      add_library(hdf5_hl STATIC IMPORTED GLOBAL)
    endif()
    set_target_properties(hdf5 PROPERTIES IMPORTED_LOCATION ${HDF5_LIBRARY})
    set_target_properties(hdf5_hl PROPERTIES IMPORTED_LOCATION ${HDF5_HL_LIBRARY})
    list(APPEND LPM_EXT_INCLUDE_DIRS ${HDF5_INCLUDE_DIR})
    list(APPEND LPM_EXT_LIBRARIES hdf5 hdf5_hl)
  endif(hdf5_FOUND)

  list(APPEND CMAKE_MODULE_PATH $ENV{NETCDF_ROOT})
  find_package(netcdf CONFIG QUIET)
  if (netcdf_FOUND)
    message(STATUS "found netcdf cmake package.")
  else (netcdf_FOUND)
    #
    # look for non-cmake netcdf
    #
    message(STATUS "cmake package netcdf not found.  Looking for explicit include dirs and library")
    if (NETCDF_INCLUDE_DIR)
      if (NOT EXISTS ${NETCDF_INCLUDE_DIR})
        message(FATAL_ERROR "Couldn't find NetCDF include dir at ${NETCDF_INCLUDE_DIR}.")
      endif()
      message(STATUS "looking for netcdf.h in include dir: ${NETCDF_INCLUDE_DIR}.")
      if (EXISTS ${NETCDF_INCLUDE_DIR}/netcdf.h)
        message(STATUS "found netcdf.h")
      else()
        message(FATAL_ERROR "cannot find netcdf.h")
      endif()
    else(NETCDF_INCLUDE_DIR)
      message(FATAL_ERROR "on systems with non-cmake netcdf, the variable NETCDF_INCLUDE_DIR must be set to the path of netcdf.h")
    endif(NETCDF_INCLUDE_DIR)
    if (NETCDF_LIBRARY)
      if (NOT EXISTS ${NETCDF_LIBRARY})
        message(FATAL_ERROR "Couldn't find NetCDF library at ${NETCDF_LIBRARY}.")
      endif()
      message(STATUS "found netCDF library at ${NETCDF_LIBRARY}.")
    else(NETCDF_LIBRARY)
      message(STATUS "on systems with non-cmake netdcdf, the variable NETCDF_LIBRARY must be set to the full path of libnetcdf.a or libnetcdf.so")
    endif(NETCDF_LIBRARY)

    #
    #  if we've made it this far, we've found the all the components we need
    #  to use a netcdf that was built without cmake.
    #
    set(netcdf_FOUND TRUE)
    set(LPM_USE_NETCDF TRUE CACHE BOOL "netcdf: all components are found.")
    if (LPM_USE_NETCDF)
      message(STATUS "netcdf is enabled, and all components are found.")
    endif()
    if (NETCDF_LIBRARY MATCHES ".so")
      add_library(netcdf SHARED IMPORTED GLOBAL)
    else()
      add_library(netcdf STATIC IMPORTED GLOBAL)
    endif()
    set_target_properties(netcdf PROPERTIES IMPORTED_LOCATION ${NETCDF_LIBRARY})
    list(APPEND LPM_EXT_INCLUDE_DIRS ${NETCDF_INCLUDE_DIR})
    list(APPEND LPM_EXT_LIBRARIES netcdf)
  endif(netcdf_FOUND)
endif(LPM_ENABLE_NETCDF)



#

#
#    if (HDF5_INCLUDE_DIR AND HDF5_HL_LIBRARY AND HDF5_LIBRARY)
#      set(LPM_USE_HDF5 TRUE)
#    else()
#      set(LPM_USE_HDF5 FALSE)
#   endif()
#
##  get_filename_component(HDF5_LIBRARY_DIR ${HDF5_LIBRARY} DIRECTORY)
##  get_filename_component(HDF5_HL_LIBRARY_DIR ${HDF5_HL_LIBRARY} DIRECTORY)
#    if (NETCDF_INCLUDE_DIR)
#      if (NOT EXISTS ${NETCDF_INCLUDE_DIR})
#        message(FATAL_ERROR "Couldn't find NetCDF include dir at ${NETCDF_INCLUDE_DIR}.")
#      endif()
#      message(STATUS "Using netCDF include dir: ${NETCDF_INCLUDE_DIR}.")
#    endif()
#    if (NETCDF_LIBRARY)
#      if (NOT EXISTS ${NETCDF_LIBRARY})
#        message(FATAL_ERROR "Couldn't find NetCDF library at ${NETCDF_LIBRARY}.")
#      endif()
#      message(STATUS "Using netCDF library at ${NETCDF_LIBRARY}.")
#    endif()
#    if (NETCDF_INCLUDE_DIR AND NETCDF_LIBRARY)
#      if (NOT LPM_USE_HDF5)
#        message(FATAL_ERROR "NetCDF requested, but HDF5 is not usable")
#      endif()
#      message(STATUS "NetCDF Enabled.")
#      set(LPM_USE_NETCDF TRUE)
#    else()
#        message(FATAL_ERROR "NetCDF requested, but not usable")
#    endif()
#  else()
#    message(STATUS "NetCDF disabled. To enable NetCDF, set LPM_ENABLE_NETCDF=TRUE")
#  endif()
