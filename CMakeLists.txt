cmake_minimum_required(VERSION 3.1)

project (LPM)

set(LPM_VERSION_MAJOR 2)
set(LPM_VERSION_MINOR 5)

set(CMAKE_CXX_STANDARD 11)

function (printvar var)
    message("${var}: ${${var}}")
endfunction()

function (list2str list str)
    string(REPLACE ";" " " tmp "${list}")
    set(${str} ${tmp} PARENT_SCOPE)
endfunction()

get_property(cxx_features GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
set(CMAKE_CXX_COMPILE_FEATURES ${cxx_features})
set(GLOBAL PROPERTY CMAKE_C_COMPILE_FEATURES ${cxx_features})

find_package(MPI REQUIRED)
FIND_PACKAGE(VTK REQUIRED HINTS $ENV{VTK_ROOT})
if (VTK_FOUND)
    option (HAVE_VTK "Located VTK libraries." ON)
    message ("VTK Found. Details:")
    printvar(VTK_INCLUDE_DIRS)
    printvar(VTK_LIBRARIES)
endif()

if (Kokkos_ROOT)
    option(HAVE_KOKKOS "Located Kokkos library." ON)
    message("Kokkos found.")
    include(${Kokkos_ROOT}/kokkos_generated_settings.cmake)
    printvar(KOKKOS_GMAKE_DEVICES)
    string(FIND ${KOKKOS_GMAKE_DEVICES} "Cuda" CUDA_STR)
    printvar(CUDA_STR)
    string(FIND ${KOKKOS_GMAKE_DEVICES} "OpenMP" OMP_STR)
    printvar(OMP_STR)
    if (OMP_STR GREATER -1)
        message("omp str found")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    endif()
    if (CUDA_STR GREATER -1)
    message("cuda string found.")
    FIND_PACKAGE(CUDA QUIET)
    IF (${CUDA_FOUND})
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} "--nvcc-wrapper-show" 
        RESULT_VARIABLE WRAPS_NVCC OUTPUT_VARIABLE WRAPS_NVCC_OUT ERROR_QUIET)    
        IF (${WRAPS_NVCC} EQUAL 0)
           OPTION(HAVE_CUDA "Kokkos/Cuda found." ON)
           SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --expt-extended-lambda --expt-relaxed-constexpr")
        endif()   	       
    endif()
    endif()
    printvar(LPM_CXXFLAGS)
    printvar(CMAKE_CXX_FLAGS)
    INCLUDE_DIRECTORIES(${Kokkos_ROOT}/include)
    ADD_LIBRARY(kokkos STATIC IMPORTED)
    SET_TARGET_PROPERTIES(kokkos PROPERTIES IMPORTED_LOCATION ${Kokkos_ROOT}/lib/libkokkos.a)
else()
    Message(FATAL_ERROR "Kokkos is required. Set CMake variable Kokkos_ROOT.")
endif()

if (Compadre_ROOT)
    option(HAVE_COMPADRE "Located Compadre GMLS toolkit" ON)
    message("Compadre located. ")
    INCLUDE_DIRECTORIES(${Compadre_ROOT}/include)
    ADD_LIBRARY(compadre STATIC IMPORTED)
    SET_TARGET_PROPERTIES(compadre PROPERTIES IMPORTED_LOCATION ${Compadre_ROOT}/lib/libcompadre.a)
else ()
    Message(STATUS "Compadre GMLS toolkit not found.")
endif() 

ADD_SUBDIRECTORY (src)
ADD_SUBDIRECTORY (tests)
#ADD_SUBDIRECTORY (examples)

CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/LpmConfig.h.in" "${PROJECT_BINARY_DIR}/LpmConfig.h" @ONLY)

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src" "${PROJECT_BINARY_DIR}" "${VTK_INCLUDE_DIRS}" "${Kokkos_ROOT}/include")

ENABLE_TESTING()
