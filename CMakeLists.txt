cmake_minimum_required(VERSION 3.1)

project (LPM)

set(LPM_VERSION_MAJOR 2)
set(LPM_VERSION_MINOR 5)

set(CMAKE_CXX_STANDARD 11)
CMAKE_POLICY(SET CMP0074 NEW)
MESSAGE(STATUS "Setting policy CMP0074 to use <Package>_ROOT environmental variables")

function (printvar var)
    message("${var}: ${${var}}")
endfunction()

function (list2str list str)
    string(REPLACE ";" " " tmp "${list}")
    set(${str} ${tmp} PARENT_SCOPE)
endfunction()

get_property(cxx_features GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
set(CMAKE_CXX_COMPILE_FEATURES ${cxx_features})
set(GLOBAL PROPERTY CMAKE_C_COMPILE_FEATURES ${cxx_features})

find_package(MPI REQUIRED)
FIND_PACKAGE(VTK REQUIRED HINTS $ENV{VTK_ROOT})
if (VTK_FOUND)
    option (LPM_HAVE_VTK "Located VTK libraries." ON)
    message ("VTK Found. Details:")
    printvar(VTK_INCLUDE_DIRS)
    printvar(VTK_LIBRARIES)
endif()

find_path(NETCDF_H_PATH "netcdf.h" HINTS $ENV{NETCDF_ROOT}/include)
printvar(NETCDF_H_PATH)
find_library(NETCDF_C netcdf HINTS ${NETCDF_H_PATH}/../lib)
printvar(NETCDF_C)
find_library(NETCDF_CXX netcdf_c++4 HINTS ${NETCDF_H_PATH}/../lib)
printvar(NETCDF_CXX)

if (LPM_ENABLE_DEBUG OR ${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
    option(LPM_ENABLE_DEBUG "Enable thorough debugging checks." ON)
endif()

set(USE_CUDA CACHE BOOL FALSE)
if (Kokkos_ROOT)
    option(HAVE_KOKKOS "Located Kokkos library." ON)
    message("Looking for Kokkos at ${Kokkos_ROOT}")
    include(${Kokkos_ROOT}/kokkos_generated_settings.cmake)
    string(FIND ${KOKKOS_GMAKE_DEVICES} "Cuda" CUDA_STR)
    string(FIND ${KOKKOS_GMAKE_DEVICES} "OpenMP" OMP_STR)
    if (OMP_STR GREATER -1)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    endif()
    if (CUDA_STR GREATER -1)
    FIND_PACKAGE(CUDA QUIET)
        printvar(CUDA_FOUND)
        IF (${CUDA_FOUND})
        execute_process(COMMAND ${CMAKE_CXX_COMPILER} "--nvcc-wrapper-show"
            RESULT_VARIABLE WRAPS_NVCC OUTPUT_VARIABLE WRAPS_NVCC_OUT ERROR_QUIET)
            IF (${WRAPS_NVCC} EQUAL 0)
               OPTION(LPM_HAVE_CUDA "Kokkos/Cuda found." ON)
               SET(USE_CUDA TRUE)
               SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --expt-extended-lambda --expt-relaxed-constexpr")
            endif()
        endif()
    endif()
    INCLUDE_DIRECTORIES(${Kokkos_ROOT}/include)
    ADD_LIBRARY(kokkos STATIC IMPORTED GLOBAL)
    SET_TARGET_PROPERTIES(kokkos PROPERTIES IMPORTED_LOCATION ${Kokkos_ROOT}/lib/libkokkos.a)
else()
    Message(FATAL_ERROR "Kokkos is required. Set CMake variable Kokkos_ROOT.")
endif()

if (Compadre_ROOT)
    option(LPM_HAVE_COMPADRE "Located Compadre GMLS toolkit" ON)
    message("Looking for Compadre GMLS toolkit at ${Compadre_ROOT} ")
    INCLUDE_DIRECTORIES(${Compadre_ROOT}/include)
    ADD_LIBRARY(compadre STATIC IMPORTED GLOBAL)
    SET_TARGET_PROPERTIES(compadre PROPERTIES IMPORTED_LOCATION ${Compadre_ROOT}/lib/libcompadre.a)
    FIND_PACKAGE(BLAS REQUIRED)
    FIND_PACKAGE(LAPACK REQUIRED)
    if (USE_CUDA)
        string(STRIP ${KOKKOS_GMAKE_TPL_LIBRARY_DIRS} CUDA_LIB_DIR)
        FIND_LIBRARY(cublas libcublas.so libcublas_static.a PATHS ${CUDA_LIB_DIR} NO_DEFAULT_PATH)
        FIND_LIBRARY(cudart HINTS ${CUDA_LIB_DIR})
        FIND_LIBRARY(cusolver HINTS ${CUDA_LIB_DIR})
    endif()
else ()
    Message(STATUS "Compadre GMLS toolkit not found.")
endif()

set(USE_SPHEREPACK CACHE BOOL FALSE)
if (Spherepack_ROOT)
    set(USE_SPHEREPACK TRUE)
    option(LPM_HAVE_SPHEREPACK "Located Spherepack library." ON)
    message("Looking for Spherepack at ${Spherepack_ROOT}")
    ADD_LIBRARY(spherepack STATIC IMPORTED GLOBAL)
    SET_TARGET_PROPERTIES(spherepack PROPERTIES IMPORTED_LOCATION ${Spherepack_ROOT}/lib/libspherepack.a)
else()
    Message(STATUS "Spherepack not found.")
endif()

ADD_SUBDIRECTORY (src)
ADD_SUBDIRECTORY (tests)
#ADD_SUBDIRECTORY (examples)

CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/LpmConfig.h.in" "${PROJECT_BINARY_DIR}/LpmConfig.h" @ONLY)

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/src" "${PROJECT_BINARY_DIR}" "${VTK_INCLUDE_DIRS}" "${Kokkos_ROOT}/include" "${NETCDF_H_PATH}")

ENABLE_TESTING()
